// <auto-generated />
using System;
using ETHBot.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ETHBot.DataLayer.Migrations
{
    [DbContext(typeof(ETHBotDBContext))]
    [Migration("20201217114342_AddRantTables")]
    partial class AddRantTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("ETHBot.DataLayer.Data.BotChannelSetting", b =>
                {
                    b.Property<int>("BotChannelSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChannelPermissionFlags")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BotChannelSettingId");

                    b.HasIndex("DiscordChannelId");

                    b.ToTable("BotChannelSettings");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.BannedLink", b =>
                {
                    b.Property<int>("BannedLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ReportTime")
                        .HasColumnType("TEXT");

                    b.HasKey("BannedLinkId");

                    b.HasIndex("ByUserId");

                    b.ToTable("BannedLinks");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.CommandStatistic", b =>
                {
                    b.Property<int>("CommandStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommandTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommandStatisticId");

                    b.HasIndex("CommandTypeId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("CommandStatistics");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.CommandType", b =>
                {
                    b.Property<int>("CommandTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CommandTypeId");

                    b.ToTable("CommandTypes");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordChannel", b =>
                {
                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelName")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("DiscordServerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiscordChannelId");

                    b.HasIndex("DiscordServerId");

                    b.ToTable("DiscordChannels");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordMessage", b =>
                {
                    b.Property<ulong>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("DiscordChannelId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("DiscordMessages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordServer", b =>
                {
                    b.Property<ulong>("DiscordServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerName")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscordServerId");

                    b.ToTable("DiscordServers");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordUser", b =>
                {
                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("DiscriminatorValue")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBot")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWebhook")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscordUserId");

                    b.ToTable("DiscordUsers");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.EmojiHistory", b =>
                {
                    b.Property<int>("EmojiHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmojiStatisticId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBot")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReaction")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmojiHistoryId");

                    b.HasIndex("EmojiStatisticId");

                    b.ToTable("EmojiHistory");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.EmojiStatistic", b =>
                {
                    b.Property<int>("EmojiInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Animated")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("EmojiId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmojiName")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("FallbackEmojiId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsedAsReaction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedByBots")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedInText")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedInTextOnce")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmojiInfoId");

                    b.ToTable("EmojiStatistics");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.PingStatistic", b =>
                {
                    b.Property<int>("PingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PingCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PingCountBot")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PingCountOnce")
                        .HasColumnType("INTEGER");

                    b.HasKey("PingInfoId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("PingStatistics");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.RantMessage", b =>
                {
                    b.Property<ulong>("RantMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RantTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RantMessageId");

                    b.HasIndex("DiscordChannelId");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("RantTypeId");

                    b.ToTable("RantMessages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.RantType", b =>
                {
                    b.Property<int>("RantTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("RantTypeId");

                    b.ToTable("RantTypes");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.SavedMessage", b =>
                {
                    b.Property<int>("SavedMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ByDiscordUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectLink")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SavedByDiscordUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SendInDM")
                        .HasColumnType("INTEGER");

                    b.HasKey("SavedMessageId");

                    b.HasIndex("ByDiscordUserId");

                    b.HasIndex("MessageId");

                    b.HasIndex("SavedByDiscordUserId");

                    b.ToTable("SavedMessages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditImage", b =>
                {
                    b.Property<int>("RedditImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Downloaded")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBlockedManually")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("RedditPostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RedditImageId");

                    b.HasIndex("RedditPostId");

                    b.ToTable("RedditImages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditPost", b =>
                {
                    b.Property<int>("RedditPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("DownvoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsText")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Permalink")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostTitle")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubredditInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpvoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("RedditPostId");

                    b.HasIndex("SubredditInfoId");

                    b.ToTable("RedditPosts");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.SubredditInfo", b =>
                {
                    b.Property<int>("SubredditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsManuallyBanned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsScraping")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewestPost")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NewestPostDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldestPost")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OldestPostDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReachedOldest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubredditDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubredditName")
                        .HasColumnType("TEXT");

                    b.HasKey("SubredditId");

                    b.ToTable("SubredditInfos");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.BotChannelSetting", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "DiscordChannel")
                        .WithMany()
                        .HasForeignKey("DiscordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.BannedLink", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "ByUser")
                        .WithMany("BannedLinks")
                        .HasForeignKey("ByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.CommandStatistic", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.CommandType", "Type")
                        .WithMany()
                        .HasForeignKey("CommandTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordChannel", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordServer", "DiscordServer")
                        .WithMany()
                        .HasForeignKey("DiscordServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordMessage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("DiscordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.EmojiHistory", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.EmojiStatistic", "EmojiStatistic")
                        .WithMany()
                        .HasForeignKey("EmojiStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.PingStatistic", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.RantMessage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("DiscordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.RantType", "RantType")
                        .WithMany()
                        .HasForeignKey("RantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.SavedMessage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "ByDiscordUser")
                        .WithMany()
                        .HasForeignKey("ByDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "SavedByDiscordUser")
                        .WithMany()
                        .HasForeignKey("SavedByDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditImage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Reddit.RedditPost", "RedditPost")
                        .WithMany("RedditImages")
                        .HasForeignKey("RedditPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditPost", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Reddit.SubredditInfo", "SubredditInfo")
                        .WithMany("RedditPosts")
                        .HasForeignKey("SubredditInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
